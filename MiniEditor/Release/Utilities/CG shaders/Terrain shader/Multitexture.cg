	

	struct vertex
	{
		float4 position			:POSITION;
		float2 texCoord			:TEXCOORD0;
		float3 normal			:NORMAL;
		float4 color			:COLOR0;
	};
		
	struct fragment
	{
		float4 position			:POSITION;
		float2 texCoord		    :TEXCOORD0;
		float4 color		    :COLOR0;
	};
	

	struct pixel
	{
		float4 color		    :COLOR;
	};
	
	
	fragment passVertex( vertex IN, 
				         uniform float4x4 ModelViewMatrix,
				         
						 uniform float3 lightPosition[32],
						 uniform float3 eyePosition,
						 uniform float3 Ka,
						 uniform float3 Kd[32],
						 
						 uniform int    lightCount,
						 
						 uniform int    enableLighting,
						 
						 uniform float  scale )
	{
		fragment OUT;
		
			OUT.position = mul(ModelViewMatrix, IN.position);
		
			OUT.texCoord = IN.texCoord;
			
			if( enableLighting )
			{
				
				//IN.normal.x = IN.normal.x / (scale*scale);
				//IN.normal.y = IN.normal.y / (scale*scale);
			//	IN.normal.z = IN.normal.z / (scale*scale);
			
				IN.normal /= pow(scale, 2);
				
				float3 P = IN.position.xyz;
				float3 N = IN.normal;
				
				float3 globalAmbient = (1,1,1),
					   lightColor	 = (1,1,1);

			// Compute ambient term
			
				float3 ambient = Ka * globalAmbient;

			// Compute the diffuse term
			
				float3 diffuse = 0;
				
				for(int i = 0; i < lightCount; i++)
				{
					float3 L = normalize(lightPosition[i] - P);
					float diffuseLight = max(dot(N, L), 0);
					diffuse += Kd[i] * lightColor * diffuseLight;
				}
				
				
				OUT.color.xyz = ambient + diffuse;
				OUT.color.w = IN.color.a;
			}
			else
			{
				OUT.color = IN.color;
			}
				
		return OUT;
	}
	
	
	pixel passFragment( fragment IN, 
	
						uniform sampler2D texture	:TEXUNIT0
						//uniform sampler2D texture1	:TEXUNIT1,
						//uniform sampler2D texture2	:TEXUNIT2,
						//uniform sampler2D texture3	:TEXUNIT3,
						////uniform sampler2D texture4	:TEXUNIT4,
						//uniform sampler2D texture5	:TEXUNIT5,
						///uniform sampler2D texture6	:TEXUNIT6,
						//uniform sampler2D texture7	:TEXUNIT7,
						
						//uniform int textureCount
					   )
	{
		pixel OUT;
				
			OUT.color  = (tex2D( texture, IN.texCoord ) * IN.color);
	
		return OUT;
	}