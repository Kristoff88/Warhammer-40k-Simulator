

	struct appdata 
	{
		float4 position		:POSITION;
		float2 texCoord		:TEXCOORD0;
		float3 normal		:NORMAL;
		float4 color		:COLOR0;
		
		float4 wave;
		float1 level;
	};
	
	
	struct vfconn
	{
		float4 position		:POSITION;
		float2 texCoord		:TEXCOORD0;
		float4 color		:COLOR0;
	};
	
	
	struct pixel
	{
		float4 color		:COLOR;
	};



	vfconn makeWave( appdata IN,	
	                 uniform float4x4 ModelViewProj,
	                 
	                 uniform float3 lightPosition[32],
					 uniform float3 eyePosition,
					 uniform float3 Ka,
					 uniform float3 Kd[32],
						 
					 uniform int    lightCount,
						 
					 uniform int    enableLighting )
	{
			vfconn OUT;	
		
		// zmiana Y na podstawie wave i level
		
			IN.position.y = (   
								( 
								 sin( (IN.wave.x + IN.position.x) / IN.wave[3] ) + 
								 sin( (IN.wave.z + IN.position.z) / IN.wave[3] ) 
								)
								 * IN.level[0] 
							)
		                    + IN.wave.y;
		                    
		// Transform The Vertex Position Into Homogenous Clip-Space (Required)
		
			OUT.position = mul(ModelViewProj, IN.position);
		
		// ustawienie tex coord'ow
		
			OUT.texCoord = IN.texCoord;

		// ustawienie koloru
		
			if( enableLighting )
			{
				float3 P = IN.position.xyz;
				float3 N = IN.normal;
				
				float3 globalAmbient = (1,1,1),
					   lightColor	 = (1,1,1);

			// Compute ambient term
			
				float3 ambient = Ka * globalAmbient;

			// Compute the diffuse term
			
				float3 diffuse = 0;
				
				for(int i = 0; i < lightCount; i++)
				{
					float3 L = normalize(lightPosition[i] - P);
					float diffuseLight = max(dot(N, L), 0);
					diffuse += Kd[i] * lightColor * diffuseLight;
				}
				
				OUT.color.xyz = ambient + diffuse;
				OUT.color.w   = IN.color.a;
			}
			else
			{
				OUT.color    = IN.color;
			}

			return OUT;
	}
	
	pixel passFragment(vfconn IN, uniform sampler2D texture	:TEXUNIT0)
	{
		pixel OUT;
		
			OUT.color = tex2D( texture, IN.texCoord ) * IN.color;
		
		return OUT;
	}